{
  "version": 3,
  "sources": ["../src/q.ts"],
  "sourcesContent": ["export class Q<T = unknown> {\n  /** Internal **a**rray of queued items. */\n  private a: T[]\n\n  /** Internal **h**ead of the queue (as an offset on the internal array). */\n  private h: number\n\n  /** Creates a new queue, optionally with a specified array of items. */\n  constructor(items?: T[]) {\n    this.reset(items)\n  }\n\n  /** Adds one item to the back/tail of the queue (enqueue). */\n  push(item: T) {\n    this.a.push(item)\n  }\n\n  /** Removes one item from the front/head of the queue (dequeue). */\n  shift() {\n    var item = this.a[this.h]\n    this.a[this.h++] = undefined\n\n    // Above some threshold, if half the array has been shifted, remove the empty portion\n    if (this.h > 1000 && 2 * this.h > this.a.length) {\n      this.a = this.a.slice(this.h)\n      this.h = 0\n    }\n\n    return item as number | undefined\n  }\n\n  /** Returns the item at the specified index without removing it (peek). */\n  at(index: number) {\n    // Prevents out-of-bounds index lookups, which could reduce performance from then on (V8).\n    // To validate both positive and negative indices, it converts any negative indices to\n    // positive minus 1 when checking, so that index > length (-3 becomes 2).\n    if ((index < 0 ? -index - 1 : index) > this.a.length) return\n\n    // Positive indices are added to head, negative indices subtracted from tail (this.a.length).\n    return this.a[(index < 0 ? this.a.length : this.h) + index]\n  }\n\n  /** Number of items currently held in the queue. */\n  size() {\n    return this.a.length - this.h\n  }\n\n  /** Whether the queue has any items. Useful in `while` loops. */\n  hasItems() {\n    return this.h != this.a.length\n  }\n\n  /** Returns an array of all items in the queue. */\n  toArray() {\n    return this.a.slice(this.h)\n  }\n\n  /** Resets the queue, optionally to a specified array of items. */\n  reset(items: T[] = []) {\n    this.a = items\n    this.h = 0\n  }\n}\n"],
  "mappings": "AAAO,aAAM,EAAe;AAAA;AAAA,EAQ1B,YAAY,OAAa;AACvB,SAAK,MAAM,KAAK;AAAA,EAClB;AAAA;AAAA,EAGA,KAAK,MAAS;AACZ,SAAK,EAAE,KAAK,IAAI;AAAA,EAClB;AAAA;AAAA,EAGA,QAAQ;AACN,QAAI,OAAO,KAAK,EAAE,KAAK,CAAC;AACxB,SAAK,EAAE,KAAK,GAAG,IAAI;AAGnB,QAAI,KAAK,IAAI,OAAQ,IAAI,KAAK,IAAI,KAAK,EAAE,QAAQ;AAC/C,WAAK,IAAI,KAAK,EAAE,MAAM,KAAK,CAAC;AAC5B,WAAK,IAAI;AAAA,IACX;AAEA,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,GAAG,OAAe;AAIhB,SAAK,QAAQ,IAAI,CAAC,QAAQ,IAAI,SAAS,KAAK,EAAE;AAAQ;AAGtD,WAAO,KAAK,GAAG,QAAQ,IAAI,KAAK,EAAE,SAAS,KAAK,KAAK,KAAK;AAAA,EAC5D;AAAA;AAAA,EAGA,OAAO;AACL,WAAO,KAAK,EAAE,SAAS,KAAK;AAAA,EAC9B;AAAA;AAAA,EAGA,WAAW;AACT,WAAO,KAAK,KAAK,KAAK,EAAE;AAAA,EAC1B;AAAA;AAAA,EAGA,UAAU;AACR,WAAO,KAAK,EAAE,MAAM,KAAK,CAAC;AAAA,EAC5B;AAAA;AAAA,EAGA,MAAM,QAAa,CAAC,GAAG;AACrB,SAAK,IAAI;AACT,SAAK,IAAI;AAAA,EACX;AACF;",
  "names": []
}
