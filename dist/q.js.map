{
  "version": 3,
  "sources": ["../src/q.ts"],
  "sourcesContent": ["export class Q<T = unknown> {\n  private list: Array<T | undefined>\n  private head: number\n  private tail: number\n\n  /** Creates a new queue, optionally with a specified array of items. */\n  constructor(items?: Array<T>) {\n    this.reset(items)\n  }\n\n  /** Adds an item to the tail of the queue (enqueue). */\n  push(item: T) {\n    this.list[this.tail++] = item\n  }\n\n  /** Removes one item from the head of the queue (dequeue). */\n  shift() {\n    const item = this.list[this.head]\n    this.list[this.head++] = undefined\n    return item\n  }\n\n  /** Returns the item at the specified index without removing it (peek). */\n  at(index: number) {\n    return this.list[(index < 0 ? this.tail : this.head) + index]\n  }\n\n  /** Number of items currently held in the queue. */\n  size() {\n    return this.tail == this.head ? 0 : this.tail - this.head\n  }\n\n  /** Whether the queue has any items. */\n  hasItems() {\n    return this.tail != this.head\n  }\n\n  /** Returns an array of all items in the queue. */\n  toArray() {\n    return this.list.slice(this.head)\n  }\n\n  /** Resets the queue, optionally to a specified array of items. */\n  reset(items: Array<T> = []) {\n    this.list = items\n    this.head = 0\n    this.tail = items.length\n  }\n}\n"],
  "mappings": "AAAO,aAAM,EAAe;AAAA;AAAA,EAM1B,YAAY,OAAkB;AAC5B,SAAK,MAAM,KAAK;AAAA,EAClB;AAAA;AAAA,EAGA,KAAK,MAAS;AACZ,SAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EAC3B;AAAA;AAAA,EAGA,QAAQ;AACN,UAAM,OAAO,KAAK,KAAK,KAAK,IAAI;AAChC,SAAK,KAAK,KAAK,MAAM,IAAI;AACzB,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,GAAG,OAAe;AAChB,WAAO,KAAK,MAAM,QAAQ,IAAI,KAAK,OAAO,KAAK,QAAQ,KAAK;AAAA,EAC9D;AAAA;AAAA,EAGA,OAAO;AACL,WAAO,KAAK,QAAQ,KAAK,OAAO,IAAI,KAAK,OAAO,KAAK;AAAA,EACvD;AAAA;AAAA,EAGA,WAAW;AACT,WAAO,KAAK,QAAQ,KAAK;AAAA,EAC3B;AAAA;AAAA,EAGA,UAAU;AACR,WAAO,KAAK,KAAK,MAAM,KAAK,IAAI;AAAA,EAClC;AAAA;AAAA,EAGA,MAAM,QAAkB,CAAC,GAAG;AAC1B,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,OAAO,MAAM;AAAA,EACpB;AACF;",
  "names": []
}
